[{"path":"/articles/Targets.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Available landscape targets","text":"Jaeger, J. . G. (2000). Landscape division, splitting index, effective mesh size: New measures landscape fragmentation. Landscape Ecology, 15(2), 115-130. https://doi.org/10.1023/:1008129329289","code":""},{"path":"/articles/UseCase1.html","id":"defining-targets-for-landscape-composition","dir":"Articles","previous_headings":"","what":"Defining targets for landscape composition","title":"Use Case 1: Generating landscape series with fixed structure and varying spatial configurations","text":"Let’s say , want generate 500x500 landscapes composed three focal land-use classes: shrubland, savanna, forest. fourth non-focal land-use class correspond areas vegetation cover. first thing need define class-level composition targets focal classes. keep simple just impose strict constraints landscape proportion (PLAND), number patches (NP), looser constraint patch area (AREA): can use JSON file string define targets: can also use flsgen_create_class_targets flsgen_create_landscape_targets functions:","code":"{   \"nbRows\" : 500,   \"nbCols\" : 500,   \"classes\" : [     {       \"name\" : \"shrubland\",       \"NP\" : [40, 40],       \"AREA\": [500, 3000],       \"PLAND\": [20, 20],     },     {       \"name\" : \"savanna\",       \"NP\" : [30, 30],       \"AREA\": [500, 3000],       \"PLAND\": [10, 10],     },     {       \"name\" : \"forest\",       \"NP\" : [20, 20],       \"AREA\": [500, 3000],       \"PLAND\": [10, 10],     }   ] } shrubland <- flsgen_create_class_targets(\"shrubland\", NP = c(40, 40), AREA = c(500, 3000), PLAND = c(20, 20)) savanna <- flsgen_create_class_targets(\"savanna\", NP = c(30, 30), AREA = c(500, 3000), PLAND = c(10, 10)) forest <- flsgen_create_class_targets(\"forest\", NP = c(20, 20), AREA = c(500, 3000), PLAND = c(10, 10)) ls_targets <- flsgen_create_landscape_targets(500, 500, list(shrubland, savanna, forest))"},{"path":"/articles/UseCase1.html","id":"generating-a-landscape-structure","dir":"Articles","previous_headings":"","what":"Generating a landscape structure","title":"Use Case 1: Generating landscape series with fixed structure and varying spatial configurations","text":"generate landscape structure satisfying targets, use flsgen_structure methods: structure formatted JSON string, can easily converted dataframe using jsonlite package: Note: search_strategy parameter flsgen_structure indicate Choco-solver construct search tree. Although search strategy influence whether targets satisfied , can help diversify generated structure exploring search tree different ways. Available search strategies Choco : \"\"DEFAULT\", \"RANDOM\", \"DOM_OVER_W_DEG\", \"DOM_OVER_W_DEG_REF\", \"ACTIVITY_BASED\", \"CONFLICT_HISTORY\", \"MIN_DOM_LB\", \"MIN_DOM_UB\" (please refer Choco documentation want details).","code":"structure <- flsgen_structure(ls_targets) ## Landscape structure 1 found in 0.2535198 s structure_df <- jsonlite::fromJSON(structure) for (i in 1:nrow(structure_df$classes)) {   cat(paste(structure_df$classes[i,]$name, \":\",             \"\\n\\t number of patches\", structure_df$classes[i,]$NP,             \"\\n\\t smallest patch size\", structure_df$classes[i,]$SPI,             \"\\n\\t largest patch size\", structure_df$classes[i,]$LPI, \"\\n\\n\")) } ## shrubland :  ##   number of patches 40  ##   smallest patch size 500  ##   largest patch size 3000  ##  ## savanna :  ##   number of patches 30  ##   smallest patch size 833  ##   largest patch size 834  ##  ## forest :  ##   number of patches 20  ##   smallest patch size 500  ##   largest patch size 3000"},{"path":"/articles/UseCase1.html","id":"generating-our-first-landscape","dir":"Articles","previous_headings":"","what":"Generating our first landscape","title":"Use Case 1: Generating landscape series with fixed structure and varying spatial configurations","text":"point, can quickly generate landscape raster using flsgen_generate method:","code":"landscape <- flsgen_generate(structure, verbose = FALSE) plot(landscape)"},{"path":"/articles/UseCase1.html","id":"varying-spatial-configuration","dir":"Articles","previous_headings":"","what":"Varying spatial configuration","title":"Use Case 1: Generating landscape series with fixed structure and varying spatial configurations","text":"three parameters influencing spatial configuration produced landscapes flsgen_generate: min_distance parameter, defines minimum distance two patches class. terrain parameter, continuous raster guiding generation algorithm. terrain_dependency parameter, defines extent generation algorithm influenced terrain. Terrain rasters can either generated “--fly” flsgen, relies diamond-square (midpoint displacement) algorithm given input. last option makes possible use continuous neutral landscapes generated software packages NLMR, even digital elevation models real landscapes. , generate landscape various spatial configurations varying terrain dependency parameter. also fix roughness parameter 0.2 --fly diamond-square terrain generation min_distance parameter 4.  Although look different, landscapes exact composition. can check using landscapemetrics package:","code":"td_seq <- seq(0, 1, by=0.1) landscapes <- lapply(td_seq, function(td) {   flsgen_generate(structure, roughness = 0.2, terrain_dependency = td, min_distance = 4, verbose = FALSE) }) library(landscapemetrics)  # Number of patches for landscape 2 (td=0.1) np_landscape_2 <- lsm_c_np(landscapes[[2]]) np_landscape_2[np_landscape_2$class > -1,]  # Number of patches for landscape 10 (td=0.9) np_landscape_10 <- lsm_c_np(landscapes[[10]]) np_landscape_10[np_landscape_10$class > -1,]  # Proportion of landscape for landscape 3 (td=0.2) pland_landscape_3 <- lsm_c_pland(landscapes[[3]]) pland_landscape_3[pland_landscape_3$class > -1,]  # Proportion of landscape for landscape 9 (td=0.8) pland_landscape_9 <- lsm_c_pland(landscapes[[9]]) pland_landscape_9[pland_landscape_9$class > -1,]"},{"path":"/articles/UseCase1.html","id":"using-external-raster-continuous-raster-gradients","dir":"Articles","previous_headings":"","what":"Using external raster continuous raster gradients","title":"Use Case 1: Generating landscape series with fixed structure and varying spatial configurations","text":"terrain parameter influences spatial configuration produced landscapes, can use external rasters, real data external software. use NLMR generate continuous gradients use input flsgen_generate","code":"library(NLMR) mrf <- nlm_mosaicfield(500, 500) plg <- nlm_planargradient(500, 500) edg <- nlm_edgegradient(500, 500) dg <- nlm_distancegradient(500, 500, origin = c(20, 20, 20, 20)) rand <- nlm_random(500, 500) fbm <- nlm_fbm(500, 500) terrains <- c(mrf, plg, edg, dg, rand, fbm) landscapes <- lapply(terrains, function(t) {   flsgen_generate(structure, terrain_file = t, terrain_dependency = 0.8, min_distance = 4) })"},{"path":"/articles/UseCase2.html","id":"generating-the-landscape-series","dir":"Articles","previous_headings":"","what":"Generating the landscape series","title":"Use case 2: Exploring correlations between landscape indices","text":"following code generates ten 500x500 landscapes different structure target value MESH 1000 60000 (maximum allowed deviation 1%), increment step 250. landscape can 1 200 patches, patch areas can vary 10 250000. Note: Although target values cell surfaces, configure rflsgen generate landscapes projected coordinate system 30x30 m resolution. geographical units, total extent 22,500ha, MESH vary 90 ha 5400 ha. First, prepare output directories generated rasters: , define fuction generates 10 landscape varying structures given MESH target (see comments code details): Note: flsgen_structure, set search_strategy parameter \"RANDOM\". parameter configures Choco-solver randomly construct explore search tree, thus ensure greater variability landscape structures. downside using random search strategy Choco take advantage problem structure build search tree, consequence fewer guarantees run time. set limit 60 seconds, restart search takes long. Also, note search strategy influence whether targets satisfied , just indicates solver construct search tree, according available strategies, : \" DEFAULT\", \"RANDOM\", \"DOM_OVER_W_DEG\", \"DOM_OVER_W_DEG_REF\", \"ACTIVITY_BASED\", \"CONFLICT_HISTORY\", \"MIN_DOM_LB\", \"MIN_DOM_UB\" (please refer Choco documentation want details).","code":"library(rflsgen)  basepath <- \"<the base path for all generated landscapes>\"  mesh_seq <- seq(1000, 60000, by=250) repeats <- seq(1, 10, by=1)  # Clear and create output directories for generated landscapes lapply(mesh_seq, function(mesh) {   path <- paste0(basepath, mesh)   if (dir.exists(path)) {     unlink(path, recursive = TRUE)   }   dir.create(path) }) meta_generate <- function(mesh) {   generate <- function(n) {     # First we create targets for our focal class     rainforest <- flsgen_create_class_targets(         \"forest\",         NP = c(1, 200), # Number of patches target         AREA = c(10, 500*500), # Patch area target         MESH = c(0.99*mesh, 1.01*mesh) # Effective mesh size target     )     # Then we create landscape targets     ls_targets <- flsgen_create_landscape_targets(         500, 500, # Dimensions of the landscape         list(rainforest), # Class targets     )     # Because we let a high degree of freedom in the landscape structure, it     # is possible to end up with structures that cannot be spatially embedded.     # The generation algorithm, as being stochastic, can also fail to embed      # structures where the focal class occupy almost all the landscape.     # To prevent the program from stopping, we let flsgen 20 tries to generate     # a landscape.     i <- 0;     repeat {       if (i >= 20) {         stop(\"fail\")       }       i <- i + 1       try({         # We use flsgen_structure with a RANDOM search strategy to identify a         # landscape structure satisfying the MESH target         structure <- flsgen_structure(             ls_targets,             search_strategy = \"RANDOM\",             time_limit = 60         )         # We generate the landscape with flsgen_generate         result <- flsgen_generate(           structure_str = structure,           terrain_dependency = 0.8,           roughness = 0.35,           epsg = \"EPSG:3163\",           resolution_x = 30,           output = paste0(basepath, mesh, \"/mesh_\", mesh, \"__\", n, \".tif\"),           max_try_patch = 20,           max_try = 2,           min_distance = 4         )       })     }   }   lapply(repeats, generate) } lapply(mesh_seq, meta_generate)"},{"path":"/articles/UseCase2.html","id":"converting-rasters-into-vectors","dir":"Articles","previous_headings":"","what":"Converting rasters into vectors","title":"Use case 2: Exploring correlations between landscape indices","text":"Makurhini package can compute connectivity metrics vector datasets. Consequently, first need convert generated landscapes vectors. several ways (e.g. using GIS software QGIS, using GDAL, etc). suggest rather efficient way R, relying sf stars packages.","code":"library(stars) library(sf)  lapply(mesh_seq, function(mesh) {   path <- paste0(basepath, mesh)   lapply(repeats, function(n) {     input <- paste0(basepath, mesh, \"/mesh_\", mesh, \"__\", n, \".tif\")     output <- paste0(basepath, mesh, \"/shape_mesh_\", mesh, \"__\", n, \".shp\")     # Read the raster using stars     s <- read_stars(input)     # Set every non-focal cell to NA     s[[1]][s[[1]] != 0] = NA     # Convert the raster to vector with sf     v <- st_as_sf(s)     st_write(v, output)   }) })"},{"path":"/articles/UseCase2.html","id":"computing-the-probability-of-connectivity-pc","dir":"Articles","previous_headings":"","what":"Computing the probability of connectivity (PC)","title":"Use case 2: Exploring correlations between landscape indices","text":"now ready compute PC index generated landscapes, prepare dataset correlation analysis. following code, populate data frame row corresponds one generated landscapes. , use Makurhini compute PC (rely default probability threshold method based inverse mean distance patches, see Makurhini documentation detail), also use landscapemetrics compute exact MESH value (allowed maximum deviation 1%).","code":"library(landscapemetrics) library(Makurhini)  df <- expand.grid(\"mesh_target\" = mesh_seq, \"n\" = repeats) df$file <- paste0(basepath, df$mesh_target, \"/shape_mesh_\", df$mesh_target, \"__\", df$n, \".shp\") df$mesh <- sapply(seq(1, nrow(df), by=1), function(i) {   cat(paste(\"compute MESH for\", i, \"\\n\"))   path <- paste0(basepath, df[i,]$mesh_target, \"/mesh_\", df[i,]$mesh_target, \"__\", df[i,]$n, \".tif\")   lsm_c_mesh(raster(path))[2,]$value })  df$PC <- sapply(seq(1, nrow(df), by=1), function(i) {   shape <- st_read(df[i, ]$file)   if (nrow(shape) == 1) {     df[i, ]$mesh / (500*500*30*30/10000)   } else {     PC <- MK_dPCIIC(       nodes = shape,       distance = list(type = \"centroid\"),        metric = \"PC\",        onlyoverall = TRUE,        LA =500*500*30*30/10000,        area_unit = \"ha\"     )     PC[3,]$Value   } })"},{"path":"/articles/UseCase2.html","id":"plotting-the-result-and-evaluating-the-correlation","dir":"Articles","previous_headings":"","what":"Plotting the result and evaluating the correlation","title":"Use case 2: Exploring correlations between landscape indices","text":"","code":"library(ggplot2)  make_fig <- function() {   point_size <- 1.5   ggplot(data = df[df$mesh_target <= 60000,]) +     geom_point(alpha = 0.5, size=point_size, aes(x=mesh, y=PC)) +     stat_smooth(aes(x=mesh, y=PC), se=TRUE, color=\"deepskyblue3\", alpha=0.8) +     labs(       x = expression(\"Effective mesh size (ha)\"),       y = expression(\"Probability of connectivity\")     ) +     theme_bw() +     theme(axis.title.x = element_text(size = 13, family = \"Helvetica\"),           axis.title.y = element_text(size = 13, family = \"Helvetica\"),           legend.position=\"none\") }  make_fig()  cor.test(df$mesh, df$PC, method = c(\"pearson\")) Pearson's product-moment correlation  data:  df$mesh and df$PC t = 55.602, df = 2368, p-value < 2.2e-16 alternative hypothesis: true correlation is not equal to 0 95 percent confidence interval:  0.7344983 0.7694578 sample estimates:       cor  0.7525077"},{"path":"/articles/UseCase2.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Use case 2: Exploring correlations between landscape indices","text":"Jaeger, J. . G. (2000). Landscape division, splitting index, effective mesh size: New measures landscape fragmentation. Landscape Ecology, 15(2), 115-130. https://doi.org/10.1023/:1008129329289 Saura, S., & Pascual-Hortal, L. (2007). new habitat availability index integrate connectivity landscape conservation planning: Comparison existing indices application case study. Landscape Urban Planning, 83(2), 91-103. https://doi.org/10.1016/j.landurbplan.2007.03.005","code":""},{"path":"/articles/UseCase3.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Use case 3: Recreating large landscape composition patterns","text":"Buchhorn, M., Smets, B., Bertels, L., Roo, B. D., Lesiv, M., Tsendbazar, N.-E., Herold, M., & Fritz, S. (2020). Copernicus Global Land Service: Land Cover 100m: collection 3: epoch 2019: Globe (V3.0.1) [Data set]. Zenodo. https://doi.org/10.5281/ZENODO.3939050","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dimitri Justeau-Allaire. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Justeau-Allaire D, Blanchard G, Ibanez T, Lorca X, Vieilledent G, Birnbaum P (2022). rflsgen: R Interface 'Flsgen' Neutral Landscape Generator Targets Landscape Indices. R package version 1.0.0, https://dimitri-justeau.github.io/rflsgen/.","code":"@Manual{,   title = {rflsgen: R Interface to the 'Flsgen' Neutral Landscape Generator with Targets on Landscape Indices},   author = {Dimitri Justeau-Allaire and Grégoire Blanchard and Thomas Ibanez and Xavier Lorca and Ghislain Vieilledent and Philippe Birnbaum},   year = {2022},   note = {R package version 1.0.0},   url = {https://dimitri-justeau.github.io/rflsgen/}, }"},{"path":"/index.html","id":"rflsgen","dir":"","previous_headings":"","what":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"rflsgen R distribution flsgen, neutral landscape generator allows users set targets landscape indices. first relies Choco-solver identify landscape structure satisfying user targets, uses stochastic algorithm produce landscape rasters. Download installation Fractal terrain generation Landscape structure generation Landscape raster generation Masking Extracting structures existing landscape","code":""},{"path":"/index.html","id":"download-and-installation-","dir":"","previous_headings":"","what":"Download and installation","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"Java 8+ must installed system run rflsgen. Download installation instructions Java available : https://www.oracle.com/java/technologies/javase-downloads.html, : https://openjdk.java.net/install/. provide R interface flsgen, written Java, rflsgen relies rJava, dependency rflsgen installed automatically. trouble installation rflsgen due rJava, please refer rJava’s documentation: https://rforge.net/rJava/index.html. rflsgen available CRAN, can install R using following command: install rflsgen Github, can use devtools library (https://www.r-project.org/nosvn/pandoc/devtools.html) use following commands R:","code":"install.packages(\"rflsgen\") library(rflsgen) devtools::install_github(\"dimitri-justeau/rflsgen\") library(rflsgen)"},{"path":[]},{"path":"/index.html","id":"generating-a-fractal-terrain-raster-","dir":"","previous_headings":"Quickstart","what":"Generating a fractal terrain raster","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"can easily generate fractal terrain raster using flsgen_terrain function. example, want generate 200x200 fractal terrain default parameters, use following command:","code":"terrain <- flsgen_terrain(200, 200) plot(terrain)"},{"path":"/index.html","id":"generating-landscape-structures-from-targets-","dir":"","previous_headings":"Quickstart","what":"Generating landscape structures from targets","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"Say want generate landscape structure 200x200 landscape containing three landscape classes (plus background class), following user targets: first possibility create JSON file (e.g. target.json) describing targets (note can also store json string variable): second possibility use rflsgen helper functions: Using flsgen_structure function, can generate non-spatially-explicit landscape structure: result JSON-formatted string contains generated structure. can easily converted data frame dedicated library jsonlite.","code":"{   \"nbRows\" : 200,   \"nbCols\" : 200,   \"classes\" : [     {       \"name\" : \"Class A\",        \"NP\" : [1, 10],        \"AREA\" : [300, 4000],        \"CA\" : [1000, 5000],        \"MESH\" : [225, 225]     },      {       \"name\" : \"Class B\",        \"NP\" : [2, 8],        \"AREA\" : [200, 4000],        \"PLAND\" : [40, 40]     },      {       \"name\" : \"Class C\",        \"NP\" : [5, 7],        \"AREA\" : [800, 1200]     }   ] } cls_a <- flsgen_create_class_targets(     \"Class A\",     NP = c(1, 10),     AREA = c(300, 4000),     CA = c(1000, 5000),     MESH = c(225, 225) ) cls_b <- flsgen_create_class_targets(     \"Class B\",     NP = c(2, 8),     AREA = c(200, 4000),     PLAND = c(40, 40) ) cls_c <- flsgen_create_class_targets(     \"Class C\",     NP = c(5, 7),     AREA = c(800, 1200) ) ls_targets <- flsgen_create_landscape_targets(     nb_rows = 200,      nb_cols = 200,     classes = list(cls_a, cls_b, cls_c) ) structure <- flsgen_structure(targets_file = \"examples/targets.json\") structure <- flsgen_structure(ls_targets)"},{"path":"/index.html","id":"generating-landscape-rasters-from-landscape-structures-","dir":"","previous_headings":"Quickstart","what":"Generating landscape rasters from landscape structures","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"Now, let’s generate landscape raster previously generated structure. , use flsgen_generate function generate landscape raster previously generated landscape structure:","code":"landscape <- flsgen_generate(structure_str = structure) plot(landscape)"},{"path":"/index.html","id":"masking-","dir":"","previous_headings":"Quickstart","what":"Masking","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"possible use mask raster, whose NO_DATA cell unavailable focal non-focal classes. , instead specifying number rows columns targets, specify mask raster maskRasterPath key: :","code":"{   \"maskRasterPath\": \"mask.tif\"   \"classes\" : [     {       \"name\" : \"Class A\",        \"NP\" : [2, 30],        \"AREA\" : [200, 4000],        \"PLAND\" : [40, 40]     }   ] } cls_a <- flsgen_create_class_targets(     \"Class A\",     NP = c(2, 30),     AREA = c(200, 4000),     PLAND = c(40, 40) ) ls_targets <- flsgen_create_landscape_targets(     mask_raster = \"mask.tif\",     classes = list(cls_a) )"},{"path":"/index.html","id":"extracting-structures-from-existing-landscapes-","dir":"","previous_headings":"Quickstart","what":"Extracting structures from existing landscapes","title":"R Interface to the Flsgen Neutral Landscape Generator with Targets on Landscape Indices","text":"Instead generating landscape structure targets, also possible extract existing structures real landscapes use recreate real composition patterns. , simply use flsgen_extract_structure_from_raster function, indicating raster values focal classes:","code":"struct <- flsgen_extract_structure_from_raster(\"existing_raster.tif\", focal_classes=c(0, 1))"},{"path":"/reference/CLASS_LEVEL_TARGETS.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of available class targets — CLASS_LEVEL_TARGETS","title":"Vector of available class targets — CLASS_LEVEL_TARGETS","text":"Vector available class targets","code":""},{"path":"/reference/CLASS_LEVEL_TARGETS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of available class targets — CLASS_LEVEL_TARGETS","text":"","code":"CLASS_LEVEL_TARGETS"},{"path":"/reference/CLASS_LEVEL_TARGETS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector of available class targets — CLASS_LEVEL_TARGETS","text":"object class character length 14.","code":""},{"path":"/reference/flsgen_create_class_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a predefined landscape class structure that can be converted as\nJSON input for flsgen generate. — flsgen_create_class_structure","title":"Creates a predefined landscape class structure that can be converted as\nJSON input for flsgen generate. — flsgen_create_class_structure","text":"Creates predefined landscape class structure can  converted JSON input flsgen generate.","code":""},{"path":"/reference/flsgen_create_class_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a predefined landscape class structure that can be converted as\nJSON input for flsgen generate. — flsgen_create_class_structure","text":"","code":"flsgen_create_class_structure(class_name, patch_areas)"},{"path":"/reference/flsgen_create_class_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a predefined landscape class structure that can be converted as\nJSON input for flsgen generate. — flsgen_create_class_structure","text":"class_name Name class patch_areas vector patch areas","code":""},{"path":"/reference/flsgen_create_class_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a predefined landscape class structure that can be converted as\nJSON input for flsgen generate. — flsgen_create_class_structure","text":"landscape class structure","code":""},{"path":"/reference/flsgen_create_class_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a predefined landscape class structure that can be converted as\nJSON input for flsgen generate. — flsgen_create_class_structure","text":"","code":"if (FALSE) {     cls_1 <- flsgen_class_structure(\"class 1\", c(10, 100, 1000))   }"},{"path":"/reference/flsgen_create_class_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a set of targets for a landscape class — flsgen_create_class_targets","title":"Creates a set of targets for a landscape class — flsgen_create_class_targets","text":"Creates set targets landscape class, can converted JSON flsgen.","code":""},{"path":"/reference/flsgen_create_class_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a set of targets for a landscape class — flsgen_create_class_targets","text":"","code":"flsgen_create_class_targets(   class_name,   NP = NULL,   AREA = NULL,   AREA_MN = NULL,   CA = NULL,   PLAND = NULL,   PD = NULL,   SPI = NULL,   LPI = NULL,   MESH = NULL,   SPLI = NULL,   NPRO = NULL,   SDEN = NULL,   COHE = NULL,   DIVI = NULL )"},{"path":"/reference/flsgen_create_class_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a set of targets for a landscape class — flsgen_create_class_targets","text":"class_name Name class NP number patches target (must vector length 2) AREA patch area target (must vector length 2) AREA_MN mean patch area target (must vector length 2) CA total class area target (must vector length 2) PLAND proportion landscape target (must vector length 2) PD patch density target (must vector length 2) SPI smallest patch index target (must vector length 2) LPI largest patch index target (must vector length 2) MESH effective mesh size target (must vector length 2) SPLI splitting index target (must vector length 2) NPRO net product target (must vector length 2) SDEN splitting density target (must vector length 2) COHE degree coherence target (must vector length 2) DIVI degree landscape division target (must vector length 2)","code":""},{"path":"/reference/flsgen_create_class_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a set of targets for a landscape class — flsgen_create_class_targets","text":"class targets object can converted JSON flsgen","code":""},{"path":"/reference/flsgen_create_class_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a set of targets for a landscape class — flsgen_create_class_targets","text":"Note NP AREA targets can set NULL, class targets used within `generate_series` function generate landscape series varying NP /AREA. However, flsgen run NP AREA set elsewhere.","code":""},{"path":"/reference/flsgen_create_class_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a set of targets for a landscape class — flsgen_create_class_targets","text":"","code":"if (FALSE) {     cls_1 <- flsgen_create_class_targets(\"class 1\", NP=c(1, 10), AREA=c(0, 1000))   }"},{"path":"/reference/flsgen_create_landscape_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","title":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","text":"Creates predefined landscape structure can converted JSON converted JSON Input flsgen generate.","code":""},{"path":"/reference/flsgen_create_landscape_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","text":"","code":"flsgen_create_landscape_structure(   nb_rows,   nb_cols,   classes,   mask_raster = NULL )"},{"path":"/reference/flsgen_create_landscape_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","text":"nb_rows Number rows nb_cols Number columns classes list class structures mask_raster mask raster (path raster object)","code":""},{"path":"/reference/flsgen_create_landscape_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","text":"landscape structure object can converted JSON flsgen generate","code":""},{"path":"/reference/flsgen_create_landscape_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","text":"class structures must created prior call function Either nb_rows nb_cols, mask_raster must specified. dimensions landscape deduced mask raster used.","code":""},{"path":"/reference/flsgen_create_landscape_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a predefined landscape structure that can be converted as JSON\nInput for flsgen generate — flsgen_create_landscape_structure","text":"","code":"if (FALSE) {     cls_1 <- flsgen_class_structure(\"class 1\", c(10, 100, 1000))     cls_2 <- flsgen_class_structure(\"class 2\", c(20, 200, 2000))     ls_struct <- flsgen_landscape_structure(200, 200, list(cls_1, cls_2))   }"},{"path":"/reference/flsgen_create_landscape_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","title":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","text":"Creates set targets landscape, can converted JSON flsgen.","code":""},{"path":"/reference/flsgen_create_landscape_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","text":"","code":"flsgen_create_landscape_targets(   nb_rows,   nb_cols,   classes,   mask_raster = NULL,   NON_FOCAL_PLAND = NULL )"},{"path":"/reference/flsgen_create_landscape_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","text":"nb_rows Number rows nb_cols Number columns classes list class targets mask_raster mask raster (path raster object) NON_FOCAL_PLAND PLAND (proportion landscape) target non-focal land-use class","code":""},{"path":"/reference/flsgen_create_landscape_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","text":"landscape targets object can converted JSON flsgen","code":""},{"path":"/reference/flsgen_create_landscape_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","text":"class targets must created prior call function Either nb_rows nb_cols, mask_raster must specified. dimensions landscape deduced mask raster used.","code":""},{"path":"/reference/flsgen_create_landscape_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a set of targets for a landscape — flsgen_create_landscape_targets","text":"","code":"if (FALSE) {     cls_1 <- flsgen_create_class_targets(\"class 1\", NP=c(1, 10), AREA=c(0, 1000))     cls_2 <- flsgen_create_class_targets(\"class 2\", NP=c(1, 10), AREA=c(0, 1000))     ls_targets <- flsgen_create_landscape_targets(200, 200, list(cls_1, cls_2))   }"},{"path":"/reference/flsgen_create_target_series.html","id":null,"dir":"Reference","previous_headings":"","what":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","title":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","text":"Create series landscape targets, one target one class varying according specified sequence.","code":""},{"path":"/reference/flsgen_create_target_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","text":"","code":"flsgen_create_target_series(   landscape_targets,   class_name = NULL,   class_id = NULL,   target_key,   sequence )"},{"path":"/reference/flsgen_create_target_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","text":"landscape_targets Number rows class_name Name class varying target class_id Index class varying target target_key Varying target key sequence sequence (list) targets varying target","code":""},{"path":"/reference/flsgen_create_target_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","text":"list landscape targets","code":""},{"path":"/reference/flsgen_create_target_series.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","text":"Either class name id must given identify class use generating series.","code":""},{"path":"/reference/flsgen_create_target_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From a base landscape target object, create a series of landscape targets,\nwith one target for one class varying according to a specified sequence. — flsgen_create_target_series","text":"","code":"if (FALSE) {     cls_1 <- flsgen_create_class_targets(\"class 1\", NP=c(1, 10), AREA=c(0, 1000))     cls_2 <- flsgen_create_class_targets(\"class 2\", AREA=c(0, 1000))     ls_targets <- flsgen_create_landscape_targets(200, 200, list(cls_1, cls_2))     target_series <- flsgen_create_target_series(ls_targets, class_name=\"class 2\",                                                  target_key=\"NP\", sequence=seq(1, 10, by=1))   }"},{"path":"/reference/flsgen_extract_structure_from_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts a landscape structure from an existing raster — flsgen_extract_structure_from_raster","title":"Extracts a landscape structure from an existing raster — flsgen_extract_structure_from_raster","text":"Extracts landscape structure existing raster","code":""},{"path":"/reference/flsgen_extract_structure_from_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts a landscape structure from an existing raster — flsgen_extract_structure_from_raster","text":"","code":"flsgen_extract_structure_from_raster(   raster_file,   focal_classes,   connectivity = 4 )"},{"path":"/reference/flsgen_extract_structure_from_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts a landscape structure from an existing raster — flsgen_extract_structure_from_raster","text":"raster_file raster object path raster focal_classes vector integers representing raster values focal classes extract structure connectivity Connectivity definition regular square grid (4 8).\"","code":""},{"path":"/reference/flsgen_extract_structure_from_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts a landscape structure from an existing raster — flsgen_extract_structure_from_raster","text":"JSON landscape structure can used flsgen generate","code":""},{"path":"/reference/flsgen_extract_structure_from_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts a landscape structure from an existing raster — flsgen_extract_structure_from_raster","text":"","code":"if (FALSE) {     ls_struct <- flsgen_extract_structure_from_raster(raster_path, c(0, 1, 2))   }"},{"path":"/reference/flsgen_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape raster generator — flsgen_generate","title":"Landscape raster generator — flsgen_generate","text":"Generate landscape raster landscape structure","code":""},{"path":"/reference/flsgen_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landscape raster generator — flsgen_generate","text":"","code":"flsgen_generate(   structure_str,   structure_file,   output = tempfile(fileext = \".tif\"),   terrain_file = NULL,   roughness = 0.5,   terrain_dependency = 0.5,   min_distance = 2,   min_max_distance = NULL,   connectivity = 4,   x = 0,   y = 0,   resolution_x = 1e-04,   resolution_y = NULL,   epsg = \"EPSG:4326\",   max_try = 2,   max_try_patch = 10,   verbose = TRUE )"},{"path":"/reference/flsgen_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Landscape raster generator — flsgen_generate","text":"structure_str JSON-formatted string describing landscape structure generate structure_file JSON file containing landscape structure generate output Path output raster file (temporary file default) terrain_file Path input terrain raster file, NULL terrain generated diamond-square algorithm roughness Roughness factor (H), 0 1 (need terrain_file NULL) terrain_dependency Terrain dependency factor landscape generation, 0 1 min_distance Minimum distance patches class min_max_distance defined, minimum distance beween patches class defined variable buffer width min_distance min_max_distance connectivity Connectivity definition regular square grid (4 8).\" x X position (geographical coordinates) top-left output raster pixel y Y position (geographical coordinates) top-left output raster pixel resolution_x x spatial resolution (geographical units) output raster (.e. pixel width) resolution_y y-spatial resolution (geographical units) output raster (.e. pixel height), null, resolution_x used epsg EPSG identifier output projection max_try Maximum number trials landscape generation max_try_patch Maximum number trials patch generation verbose TRUE print information generation","code":""},{"path":"/reference/flsgen_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Landscape raster generator — flsgen_generate","text":"raster object","code":""},{"path":"/reference/flsgen_generate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landscape raster generator — flsgen_generate","text":"input landscape structure must either specified JSON-formatted string  (structure_str parameter) JSON file (structure_file parameter)","code":""},{"path":"/reference/flsgen_generate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landscape raster generator — flsgen_generate","text":"","code":"if (FALSE) {     json <- \"{       \\\"nbRows\\\" : 200,       \\\"nbCols\\\" : 200,       \\\"classes\\\" : [         {           \\\"name\\\" : \\\"Class A\\\",           \\\"NP\\\" : [1, 10],           \\\"AREA\\\" : [300, 4000],           \\\"CA\\\" : [1000, 5000],           \\\"MESH\\\" : [225, 225]         },         {           \\\"name\\\" : \\\"Class B\\\",           \\\"NP\\\" : [2, 8],           \\\"AREA\\\" : [200, 4000],           \\\"PLAND\\\" : [40, 40]         },         {           \\\"name\\\" : \\\"Class C\\\",            \\\"NP\\\" : [5, 7],            \\\"AREA\\\" : [800, 1200]         }       ]     }\"     structure <- flsgen_structure(targets_str = json)     landscape <- flsgen_generate(structure_str = structure)   }"},{"path":"/reference/flsgen_load_structure_from_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads a landscape structure from an existing raster — flsgen_load_structure_from_raster","title":"Loads a landscape structure from an existing raster — flsgen_load_structure_from_raster","text":"Loads landscape structure existing raster","code":""},{"path":"/reference/flsgen_load_structure_from_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads a landscape structure from an existing raster — flsgen_load_structure_from_raster","text":"","code":"flsgen_load_structure_from_raster(raster_file, focal_classes, connectivity = 4)"},{"path":"/reference/flsgen_load_structure_from_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads a landscape structure from an existing raster — flsgen_load_structure_from_raster","text":"raster_file raster object path raster focal_classes vector integers representing raster values focal classes extract structure connectivity Connectivity definition regular square grid (4 8).\"","code":""},{"path":"/reference/flsgen_load_structure_from_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads a landscape structure from an existing raster — flsgen_load_structure_from_raster","text":"JSON landscape structure can used flsgen generate","code":""},{"path":"/reference/flsgen_load_structure_from_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loads a landscape structure from an existing raster — flsgen_load_structure_from_raster","text":"","code":"if (FALSE) {     ls_struct <- flsgen_load_structure_from_raster(raster_path, c(0, 1, 2))   }"},{"path":"/reference/flsgen_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape structure solver — flsgen_structure","title":"Landscape structure solver — flsgen_structure","text":"Find landscape structures satisfying user targets","code":""},{"path":"/reference/flsgen_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landscape structure solver — flsgen_structure","text":"","code":"flsgen_structure(   targets_str,   targets_file,   nb_solutions = 1,   time_limit = 60,   search_strategy = \"DEFAULT\" )"},{"path":"/reference/flsgen_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Landscape structure solver — flsgen_structure","text":"targets_str JSON-formatted string describing user targets targets_file JSON file describing user targets nb_solutions Number solutions generate time_limit Time limit seconds (time_limit = 0, time limit set) search_strategy Choco solver search strategy (details refer Choco solver documentation: https://choco-solver.org/docs/)","code":""},{"path":"/reference/flsgen_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Landscape structure solver — flsgen_structure","text":"vector JSON-formatted landscape structures satisfying user targets.","code":""},{"path":"/reference/flsgen_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landscape structure solver — flsgen_structure","text":"input user targets must either specified JSON-formatted  string (targets_str parameter) JSON file (target_file parameter).","code":""},{"path":"/reference/flsgen_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landscape structure solver — flsgen_structure","text":"","code":"if (FALSE) {     json <- \"{       \\\"nbRows\\\" : 200,       \\\"nbCols\\\" : 200,         {           \\\"name\\\" : \\\"Class A\\\",           \\\"NP\\\" : [1, 10],           \\\"AREA\\\" : [300, 4000],           \\\"CA\\\" : [1000, 5000],           \\\"MESH\\\" : [225, 225]         },         {           \\\"name\\\" : \\\"Class B\\\",           \\\"NP\\\" : [2, 8],           \\\"AREA\\\" : [200, 4000],           \\\"PLAND\\\" : [40, 40]         },         {           \\\"name\\\" : \\\"Class C\\\",            \\\"NP\\\" : [5, 7],            \\\"AREA\\\" : [800, 1200]         }       ]     }\"     structure <- flsgen_structure(targets_str = json)   }"},{"path":"/reference/flsgen_terrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Fractal terrain generator — flsgen_terrain","title":"Fractal terrain generator — flsgen_terrain","text":"Fractal terrain generation diamond-square algorithm","code":""},{"path":"/reference/flsgen_terrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fractal terrain generator — flsgen_terrain","text":"","code":"flsgen_terrain(   width,   height,   output = tempfile(fileext = \".tif\"),   roughness = 0.5,   x = 0,   y = 0,   resolution = 1e-04,   epsg = \"EPSG:4326\" )"},{"path":"/reference/flsgen_terrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fractal terrain generator — flsgen_terrain","text":"width Width (pixels) output raster height Height (pixels) output raster output Path output raster file (temporary file default) roughness Roughness factor (H), 0 1 x X position (geographical coordinates) top-left output raster pixel y Y position (geographical coordinates) top-left output raster pixel resolution Spatial resolution (geographical units) output raster (.e. pixel dimension) epsg EPSG identifier output projection","code":""},{"path":"/reference/flsgen_terrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fractal terrain generator — flsgen_terrain","text":"raster object","code":""},{"path":"/reference/flsgen_terrain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fractal terrain generator — flsgen_terrain","text":"","code":"if (FALSE) {     terrain <- flsgen_terrain(200, 200)   }"},{"path":"/news/index.html","id":"rflsgen-100","dir":"Changelog","previous_headings":"","what":"rflsgen 1.0.0","title":"rflsgen 1.0.0","text":"Rely flsgen-1.1.0, fixes several bug, improve performances, provide two new indices (AREA_MN, mean patch area NON_FOCAL_PLAND, PLAND applied non-focal class), implement variable neighborhood flexible distance patches landscape generation, masking, landscape extraction existing rasters, fine tuning. Implement helper functions facilitate creation targets. Add possibility use mask input raster. Add function extract landscape structure existing raster. Add vignettes: use cases, list description targets, frequently asked questions. Create pkgdown site.","code":""},{"path":"/news/index.html","id":"rflsgen-012","dir":"Changelog","previous_headings":"","what":"rflsgen 0.1.2","title":"rflsgen 0.1.2","text":"CRAN release: 2021-11-30 According CRAN requirements, configure Geotools store temporary EPSG database R session’s temporary directory.","code":""},{"path":"/news/index.html","id":"rflsgen-011","dir":"Changelog","previous_headings":"","what":"rflsgen 0.1.1","title":"rflsgen 0.1.1","text":"CRAN release: 2021-11-25 Update DESCRIPTION: add URL, BugReports, specify required minimum Java version (>= 8) SystemRequirements. Check system’s Java version runtime (>= 8), following CRAN’s Writing R Extensions manual.","code":""},{"path":"/news/index.html","id":"rflsgen-010","dir":"Changelog","previous_headings":"","what":"rflsgen 0.1.0","title":"rflsgen 0.1.0","text":"CRAN release: 2021-11-24 Initial release rflgen","code":""}]
